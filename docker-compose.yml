version: "3.9"

# =============================================================
# Stack Docker para desarrollo local de SwaplyAr
# =============================================================
# Servicios incluidos:
#  - postgres:       Base de datos principal (Persistente via volumen "postgres_data")
#  - pgadmin:        Consola web opcional para administrar la DB (http://localhost:${PGADMIN_PORT:-5050})
#  - postgres_test:  Base de datos aislada para pruebas (solo se levanta con profile "test")
#
# Variables de entorno:
#  Se cargan automáticamente desde el archivo .env (mismo directorio). Ejemplos claves:
#    POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_PORT
#    POSTGRES_TEST_DB, POSTGRES_TEST_USER, POSTGRES_TEST_PASSWORD, POSTGRES_TEST_PORT
#    PGADMIN_DEFAULT_EMAIL, PGADMIN_DEFAULT_PASSWORD, PGADMIN_PORT
#
# Perfiles:
#  - default: postgres, pgadmin
#  - test:    agrega postgres_test (usa: docker compose --profile test up -d postgres_test)
#
# Comandos útiles:
#  Iniciar servicios principales:       docker compose up -d postgres pgadmin
#  Iniciar solo postgres:               docker compose up -d postgres
#  Iniciar DB de test:                  docker compose --profile test up -d postgres_test
#  Ver logs de postgres:                docker compose logs -f postgres
#  Reiniciar todo (con datos):          docker compose restart
#  Borrar contenedores + volúmenes:     docker compose down -v
#  Limpiar solo DB test:                docker compose rm -sf postgres_test && docker volume rm swaplyar-backend-02_postgres_test_data (nombre puede variar)
#
# Conexión desde la app (desarrollo):
#  DATABASE_URL=postgres://postgres:admin@localhost:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-swaplyar}
#
# Conexión desde DBeaver u otro cliente:
#  Host: localhost | Puerto: ${POSTGRES_PORT:-5432} | DB: swaplyar | User: postgres | Pass: admin
#
# pgAdmin (si lo usas):
#  URL:    http://localhost:${PGADMIN_PORT:-5050}
#  Login:  ${PGADMIN_DEFAULT_EMAIL:-admin@swaplyar.com} / ${PGADMIN_DEFAULT_PASSWORD:-admin_password}
#  Para registrar el server en pgAdmin: Host=postgres  (el nombre del servicio internal network)
#
# Notas:
#  - No usar esta configuración directamente en producción (volúmenes locales, sin backups, sin SSL interno).
#  - Para test automatizados puedes forzar NODE_ENV=test y apuntará a DATABASE_TEST_URL (generada o definida).
#  - Si ya tienes un Postgres instalado en tu máquina en 5432, cambia POSTGRES_PORT en .env (ej: 5433).
# =============================================================

services:
  postgres:
    image: postgres:15-alpine
    container_name: swaplyar_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-swaplyar}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
    ports:
      # Cambia el puerto externo si ya tienes un postgres local en 5432 (ej: "5433:5432")
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-swaplyar}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: swaplyar_pgadmin
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@swaplyar.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin_password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  postgres_test:
    image: postgres:15-alpine
    container_name: swaplyar_postgres_test
    profiles: ["test"]
    # Esta DB es efímera para pruebas. Usa variables independientes.
    environment:
      POSTGRES_DB: ${POSTGRES_TEST_DB:-testdb}
      POSTGRES_USER: ${POSTGRES_TEST_USER:-testuser}
      POSTGRES_PASSWORD: ${POSTGRES_TEST_PASSWORD:-testpass}
    ports:
      - "${POSTGRES_TEST_PORT:-5438}:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_TEST_USER:-testuser} -d ${POSTGRES_TEST_DB:-testdb}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  pgadmin_data:
  postgres_test_data:
